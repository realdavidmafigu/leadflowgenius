// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:%40dstar12b@db.jpmnecaxaxbtstiyjwbl.supabase.co:5432/postgres"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  funnels   Funnel[]
  clients   Client[]
  invoices  Invoice[]
  businessProfiles BusinessProfile[]
  products Product[]
}

model Funnel {
  id        String   @id @default(uuid())
  userId    String
  name      String
  slug      String   @unique
  layout    Json
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  formSubmissions FormSubmission[]
  @@map("funnels")
}

model PageBlock {
  id        String   @id @default(uuid())
  name      String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FormSubmission {
  id        String   @id @default(uuid())
  funnelId  String
  formData  Json
  createdAt DateTime @default(now())
  userAgent String?
  funnel    Funnel   @relation(fields: [funnelId], references: [id])
}

model Client {
  id        String   @id @default(uuid())
  userId    String
  name      String
  email     String
  phone     String
  company   String
  location  String
  notes     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  invoices  Invoice[]
  @@map("clients")
}

model ManualPayment {
  id         String   @id @default(uuid())
  invoiceId  String
  clientName String
  message    String?
  proofUrl   String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  @@map("manual_payments")
}

model Invoice {
  id          String   @id @default(uuid())
  clientId    String
  userId      String
  title       String
  dueDate     DateTime
  currency    String   @default("USD")
  items       Json
  totalAmount Float
  notes       String?
  status      String   @default("Draft")
  paymentLink String?  @unique
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client   @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  manualPayments ManualPayment[]
  receipts    Receipt[]
  @@map("invoices")
}

model Receipt {
  id        String   @id @default(uuid())
  invoiceId String
  url       String
  createdAt DateTime @default(now())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  @@map("receipts")
}

model BusinessProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  name               String
  logoUrl            String?
  phone              String
  email              String
  website            String?
  address            String
  paymentInstructions String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
  @@map("business_profiles")
}

model Product {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  price       Float
  type        String // 'Product' or 'Service'
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  @@map("products")
}
